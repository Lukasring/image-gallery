[{"C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\index.tsx":"1","C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\App.tsx":"2","C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\components\\Gallery\\Gallery.tsx":"3","C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\components\\modal\\Modal.tsx":"4","C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\components\\backdrop\\backdrop.tsx":"5","C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\api\\fetchFromReddit.ts":"6"},{"size":506,"mtime":1606756403355,"results":"7","hashOfConfig":"8"},{"size":576,"mtime":1606746857383,"results":"9","hashOfConfig":"8"},{"size":4041,"mtime":1606755901157,"results":"10","hashOfConfig":"8"},{"size":660,"mtime":1606488226286,"results":"11","hashOfConfig":"8"},{"size":295,"mtime":1606415386066,"results":"12","hashOfConfig":"8"},{"size":492,"mtime":1606750824093,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1qiwv65",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\index.tsx",[],["28","29"],"C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\App.tsx",["30"],"C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\components\\Gallery\\Gallery.tsx",["31"],"import React, {useState, useEffect, useRef, useCallback} from 'react';\r\nimport {motion} from 'framer-motion';\r\nimport Modal from '../modal/Modal';\r\nimport fetchFromReddit from '../../api/fetchFromReddit';\r\nimport classes from \"./Gallery.module.css\";\r\n\r\ninterface ImageSource {\r\n  url: string,\r\n  height: number,\r\n  width: number,\r\n}\r\n\r\ninterface ImageData {\r\n  thumbnail: string,\r\n  url: string,\r\n  id: string,\r\n  preview: ImageSource,\r\n  source: ImageSource\r\n}\r\n\r\nconst Gallery= () => {\r\n  const [images, setImages] = useState<ImageData[]>([]);\r\n  const [subreddit, setSubreddit] = useState('nocontextpics');\r\n  const [loading, setLoading] = useState(true);\r\n  const [nextPage, setNextPage] = useState('');\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalImageUrl, setModalImageUrl] = useState('');\r\n\r\n  const observer = useRef<IntersectionObserver>();\r\n\r\n  const fetchMorePictures = useCallback( async () => {\r\n      setLoading(true);\r\n      const resData =await fetchFromReddit(subreddit, nextPage);\r\n      setNextPage(resData.after);\r\n      const fetchedImages = configureImageObject(resData.children);\r\n      const updatedImages = [...images, ...fetchedImages];\r\n      setImages(updatedImages);\r\n      setLoading(false);\r\n    }, [images, nextPage, subreddit])\r\n\r\n  const lastPictureElementRef = useCallback((node) => {\r\n    console.log(node);\r\n    // if(loading) return;\r\n    \r\n    if(observer.current) {\r\n      console.log(observer.current);\r\n      observer.current.disconnect();\r\n    }\r\n    console.log(\"last Picture ref preis new intersection\")\r\n    observer.current = new IntersectionObserver((entries) => {\r\n      console.log(entries);\r\n      if(entries[0].isIntersecting && images.length <=100) {\r\n        console.log('visible');\r\n        fetchMorePictures();\r\n      }\r\n    })\r\n    console.log(\"last Picture ref po new intersection\")\r\n\r\n\r\n    if(node) observer.current.observe(node);\r\n\r\n  },[fetchMorePictures, images.length])\r\n\r\n  useEffect(() => {\r\n    console.log('loading: ', loading);\r\n  },[loading]);\r\n\r\n  const configureImageObject = (data:any) => {\r\n    return data.map(((imgData:any )=> {\r\n      return {\r\n        thumbnail: imgData.data.thumbnail,\r\n        url: imgData.data.url,\r\n        id: imgData.data.id,\r\n        source: {\r\n          url: imgData.data.preview.images[0].source.url,\r\n          height: imgData.data.preview.images[0].source.height,\r\n          width: imgData.data.preview.images[0].source.width,\r\n        },\r\n        preview: imgData.data.preview.images[0].resolutions[2]\r\n      }\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n     const fetchImages = async () => {\r\n      try{\r\n      setLoading(true);\r\n      const resData = await fetchFromReddit(subreddit);\r\n      setNextPage(resData.after);\r\n      const imageData = configureImageObject(resData.children);\r\n      setImages(imageData);\r\n      setLoading(false);\r\n    } catch(err){console.error(err)}\r\n    }\r\n    fetchImages();\r\n  }, [subreddit]);\r\n\r\n  const imageClickedHandler = (url:string) => {\r\n    setModalImageUrl(url);\r\n    setShowModal(true);\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n    {showModal && <Modal show={showModal} closeModal={() => setShowModal(false)} imgUrl={modalImageUrl}/>}\r\n    {images.length>0 && <div className={classes.Gallery}>\r\n      {images.map((img:ImageData, index:number) => (\r\n        <motion.div \r\n          ref={(images.length === index+1) ? lastPictureElementRef : null}\r\n          layout\r\n          whileHover={{opacity: 1}}\r\n          key={img.id} \r\n          className={classes.ImageContainer} \r\n          onClick={() => imageClickedHandler(img.source.url)}>\r\n          <motion.img\r\n            initial={{opacity: 0}}\r\n            animate={{opacity: 1}}\r\n            transition={{delay: index/100}}\r\n            className={classes.Image} \r\n            src={img.preview.url} \r\n            alt={img.id} />\r\n        </motion.div>\r\n      ))}\r\n    </div>}\r\n    {loading && <div>Loading...</div>}\r\n    {/* <button onClick={fetchMorePictures}>More</button> */}\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Gallery;","C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\components\\modal\\Modal.tsx",[],"C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\components\\backdrop\\backdrop.tsx",[],"C:\\Users\\Lukas\\Desktop\\Projects\\REACT\\image-gallery\\src\\api\\fetchFromReddit.ts",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":3,"column":8,"nodeType":"38","messageId":"39","endLine":3,"endColumn":15},{"ruleId":"36","severity":1,"message":"40","line":23,"column":21,"nodeType":"38","messageId":"39","endLine":23,"endColumn":33},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"@typescript-eslint/no-unused-vars","'Gallery' is defined but never used.","Identifier","unusedVar","'setSubreddit' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]