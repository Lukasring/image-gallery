{"version":3,"sources":["components/Gallery/Gallery.module.css","components/modal/Modal.module.css","components/UI/NavBar/Navbar.tsx","components/UI/NavBar/NavItem.tsx","components/modal/Modal.tsx","api/fetchFromReddit.ts","components/Gallery/Gallery.tsx","App.tsx","index.tsx","components/UI/NavBar/Navbar.module.css"],"names":["module","exports","Navbar","props","className","classes","children","NavItem","useState","show","setShow","onClick","Backdrop","NavItemText","name","Modal","closeModal","imgUrl","div","initial","opacity","animate","img","y","onLoad","console","log","src","alt","React","memo","fetchFromReddit","subreddit","after","a","url","axios","get","response","data","error","Gallery","images","setImages","loading","setLoading","nextPage","setNextPage","showModal","setShowModal","modalImageUrl","setModalImageUrl","observer","useRef","fetchMorePictures","useCallback","resData","fetchedImages","configureImageObject","updatedImages","lastPictureElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","length","observe","filter","content","undefined","preview","map","imgData","previewImage","resolutions","thumbnail","id","source","height","width","useEffect","imageData","fetchImages","index","ref","layout","whileHover","ImageContainer","transition","delay","Image","SUBREDDITS","value","App","shownSub","setShownSub","dropdownItems","setDropdownItems","dropdownItem","clickedSub","newDropdownList","item","changeShownSub","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fd1b7ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Gallery\":\"Gallery_Gallery__3aQ5Z\",\"ImageContainer\":\"Gallery_ImageContainer__1ZzOr\",\"Image\":\"Gallery_Image__d-RQF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Modal_Backdrop__DcnBV\"};","import React from \"react\";\r\nimport classes from \"./Navbar.module.css\";\r\n\r\nconst Navbar: React.FC = (props) => {\r\n  return (\r\n    <nav className={classes.Navbar}>\r\n      <ul>{props.children}</ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\r\nimport classes from \"./Navbar.module.css\";\r\n\r\ntype Props = {\r\n  name: string;\r\n};\r\n\r\nconst NavItem: React.FC<Props> = (props) => {\r\n  const [show, setShow] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      {show && (\r\n        <div onClick={() => setShow(false)} className={classes.Backdrop}></div>\r\n      )}\r\n      <li onClick={() => setShow(!show)}>\r\n        <h2 className={classes.NavItemText}>{props.name}</h2>\r\n        {show && props.children}\r\n      </li>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NavItem;\r\n","import React from 'react';\r\nimport {motion} from 'framer-motion';\r\nimport classes from \"./Modal.module.css\";\r\n\r\ntype Props = {\r\n  show: boolean,\r\n  imgUrl: string,\r\n  closeModal: () => void;\r\n}\r\nconst Modal = ({show, closeModal, imgUrl}:Props) => {\r\n\r\n\r\n  return (\r\n    <motion.div \r\n      initial={{opacity: 0}}\r\n      animate={{opacity: 1}}\r\n      className={classes.Backdrop} \r\n      onClick={closeModal}\r\n    >\r\n      <motion.img \r\n        initial={{y:'-100vh'}}\r\n        animate={{y: '0'}}\r\n        onLoad={() => console.log('loaded')} \r\n        src={imgUrl} \r\n        alt=\"hello darkness\"/>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport default React.memo(Modal);","import axios from \"axios\";\r\n\r\nconst fetchFromReddit = async (subreddit: string, after?: string) => {\r\n  try {\r\n    console.log(\"sending request...\");\r\n    let url = `https://www.reddit.com/r/${subreddit}.json?raw_json=1`;\r\n    if (after) url = `${url}&after=${after}`;\r\n    const response = await axios.get(url);\r\n    // const response = await (await fetch(url)).json();\r\n    return response.data.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nexport default fetchFromReddit;\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport Modal from \"../modal/Modal\";\r\nimport fetchFromReddit from \"../../api/fetchFromReddit\";\r\nimport classes from \"./Gallery.module.css\";\r\n\r\ninterface ImageSource {\r\n  url: string;\r\n  height: number;\r\n  width: number;\r\n}\r\n\r\ninterface ImageData {\r\n  thumbnail: string;\r\n  url: string;\r\n  id: string;\r\n  preview: ImageSource;\r\n  source: ImageSource;\r\n}\r\n\r\ntype Props = {\r\n  subreddit: string;\r\n};\r\n\r\nconst Gallery: React.FC<Props> = ({ subreddit }) => {\r\n  const [images, setImages] = useState<ImageData[]>([]);\r\n  // const [subreddit, setSubreddit] = useState('nocontextpics');\r\n  const [loading, setLoading] = useState(true);\r\n  const [nextPage, setNextPage] = useState(\"\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalImageUrl, setModalImageUrl] = useState(\"\");\r\n\r\n  // useEffect(() => console.log(images));\r\n\r\n  const observer = useRef<IntersectionObserver>();\r\n\r\n  const fetchMorePictures = useCallback(async () => {\r\n    setLoading(true);\r\n    const resData = await fetchFromReddit(subreddit, nextPage);\r\n    // console.log(resData);\r\n    setNextPage(resData.after);\r\n    const fetchedImages = configureImageObject(resData.children);\r\n    const updatedImages = [...images, ...fetchedImages];\r\n    setImages(updatedImages);\r\n    setLoading(false);\r\n  }, [images, nextPage, subreddit]);\r\n\r\n  const lastPictureElementRef = useCallback(\r\n    (node) => {\r\n      // console.log(node);\r\n      // if(loading) return;\r\n\r\n      if (observer.current) {\r\n        // console.log(observer.current);\r\n        observer.current.disconnect();\r\n      }\r\n      // console.log(\"last Picture ref preis new intersection\");\r\n      observer.current = new IntersectionObserver((entries) => {\r\n        // console.log(entries);\r\n        if (entries[0].isIntersecting && images.length <= 100) {\r\n          console.log(\"visible\");\r\n          fetchMorePictures();\r\n        }\r\n      });\r\n      // console.log(\"last Picture ref po new intersection\");\r\n\r\n      if (node) observer.current.observe(node);\r\n    },\r\n    [fetchMorePictures, images.length]\r\n  );\r\n\r\n  const configureImageObject = (data: any) => {\r\n    const filteredData = data.filter(\r\n      (content: any) => !(content.data.preview === undefined)\r\n    );\r\n    // const fitleredData = data;\r\n    // console.log(fitleredData);\r\n    // console.log(data[0].data);\r\n    return filteredData.map((imgData: any) => {\r\n      // console.log(imgData.data.images[0].source.url);\r\n      let previewImage = imgData.data.preview.images[0].resolutions[2];\r\n      if (previewImage === undefined) {\r\n        previewImage = imgData.data.preview.images[0].resolutions[1];\r\n      }\r\n      return {\r\n        thumbnail: imgData.data.thumbnail,\r\n        url: imgData.data.url,\r\n        id: imgData.data.id,\r\n        source: {\r\n          url: imgData.data.preview.images[0].source.url,\r\n          height: imgData.data.preview.images[0].source.height,\r\n          width: imgData.data.preview.images[0].source.width,\r\n        },\r\n        preview: previewImage,\r\n      };\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchImages = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const resData = await fetchFromReddit(subreddit);\r\n        console.log(resData);\r\n        setNextPage(resData.after);\r\n        const imageData = configureImageObject(resData.children);\r\n        // console.log(imageData);\r\n        setImages(imageData);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    };\r\n    fetchImages();\r\n  }, [subreddit]);\r\n\r\n  const imageClickedHandler = (url: string) => {\r\n    setModalImageUrl(url);\r\n    setShowModal(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {showModal && (\r\n        <Modal\r\n          show={showModal}\r\n          closeModal={() => setShowModal(false)}\r\n          imgUrl={modalImageUrl}\r\n        />\r\n      )}\r\n      {images.length > 0 && (\r\n        <div className={classes.Gallery}>\r\n          {images.map((img: ImageData, index: number) => (\r\n            <motion.div\r\n              ref={images.length === index + 1 ? lastPictureElementRef : null}\r\n              layout\r\n              whileHover={{ opacity: 1 }}\r\n              key={img.id}\r\n              className={classes.ImageContainer}\r\n              onClick={() => imageClickedHandler(img.source.url)}\r\n            >\r\n              <motion.img\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                transition={{ delay: index / 100 }}\r\n                className={classes.Image}\r\n                src={img.preview.url}\r\n                alt={img.id}\r\n              />\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n      )}\r\n      {loading && <div>Loading...</div>}\r\n      {/* <button onClick={fetchMorePictures}>More</button> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Navbar from \"./components/UI/NavBar/Navbar\";\nimport NavItem from \"./components/UI/NavBar/NavItem\";\nimport Gallery from \"./components/Gallery/Gallery\";\n\nconst SUBREDDITS = [\n  { name: \"Earth Pics\", value: \"earthporn\" },\n  { name: \"Nature Pics\", value: \"natureporn\" },\n  { name: \"Sky Pics\", value: \"skyporn\" },\n  { name: \"Abandoned Pics\", value: \"abandonedporn\" },\n  { name: \"Eye Bleach\", value: \"eyebleach\" },\n  { name: \"Car Pics\", value: \"carporn\" },\n  { name: \"Space Pics\", value: \"spaceporn\" },\n  { name: \"Military Pics\", value: \"militaryporn\" },\n  { name: \"Beer With A View\", value: \"beerwithaview\" },\n];\n\ntype Sub = {\n  name: string;\n  value: string;\n};\n\nfunction App() {\n  const [shownSub, setShownSub] = useState<Sub>({\n    name: \"No Context Pics\",\n    value: \"nocontextpics\",\n  });\n  const [dropdownItems, setDropdownItems] = useState<Sub[]>(SUBREDDITS);\n\n  const changeShownSub = (clickedSub: Sub) => {\n    console.log(clickedSub);\n    const newDropdownList = [\n      shownSub,\n      ...dropdownItems.filter((item) => item.value !== clickedSub.value),\n    ];\n    setDropdownItems(newDropdownList);\n    setShownSub(clickedSub);\n  };\n\n  useEffect(() => {\n    console.log(\"App mounted...\");\n  }, []);\n  return (\n    <div className=\"App\">\n      <Navbar>\n        <NavItem name={shownSub.name}>\n          <div className=\"Dropdown\">\n            {dropdownItems.map((dropdownItem) => (\n              <h2\n                key={dropdownItem.value}\n                onClick={() => changeShownSub(dropdownItem)}\n                className=\"DropdownItem\"\n              >\n                {dropdownItem.name}\n              </h2>\n            ))}\n          </div>\n        </NavItem>\n      </Navbar>\n      <Gallery subreddit={shownSub.value}></Gallery>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navbar\":\"Navbar_Navbar__1_zYg\",\"NavItemText\":\"Navbar_NavItemText__2u0kR\",\"Backdrop\":\"Navbar_Backdrop__2uU8z\"};"],"sourceRoot":""}