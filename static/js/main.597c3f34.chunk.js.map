{"version":3,"sources":["components/modal/Modal.module.css","components/modal/Modal.tsx","api/fetchFromReddit.ts","components/Gallery/Gallery.tsx","App.tsx","index.tsx","components/Gallery/Gallery.module.css"],"names":["module","exports","Modal","show","closeModal","imgUrl","div","initial","opacity","animate","className","classes","Backdrop","onClick","img","y","onLoad","console","log","src","alt","React","memo","fetchFromReddit","subreddit","after","a","url","axios","get","response","data","error","Gallery","useState","images","setImages","loading","setLoading","nextPage","setNextPage","showModal","setShowModal","modalImageUrl","setModalImageUrl","observer","useRef","fetchMorePictures","useCallback","resData","fetchedImages","configureImageObject","children","updatedImages","lastPictureElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","length","observe","useEffect","map","imgData","thumbnail","id","source","preview","height","width","resolutions","imageData","fetchImages","index","ref","layout","whileHover","ImageContainer","transition","delay","Image","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.597c3f34.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Modal_Backdrop__DcnBV\"};","import React from 'react';\r\nimport {motion} from 'framer-motion';\r\nimport classes from \"./Modal.module.css\";\r\n\r\ntype Props = {\r\n  show: boolean,\r\n  imgUrl: string,\r\n  closeModal: () => void;\r\n}\r\nconst Modal = ({show, closeModal, imgUrl}:Props) => {\r\n\r\n\r\n  return (\r\n    <motion.div \r\n      initial={{opacity: 0}}\r\n      animate={{opacity: 1}}\r\n      className={classes.Backdrop} \r\n      onClick={closeModal}\r\n    >\r\n      <motion.img \r\n        initial={{y:'-100vh'}}\r\n        animate={{y: '0'}}\r\n        onLoad={() => console.log('loaded')} \r\n        src={imgUrl} \r\n        alt=\"hello darkness\"/>\r\n    </motion.div>\r\n  )\r\n}\r\n\r\nexport default React.memo(Modal);","import axios from \"axios\";\r\n\r\nconst fetchFromReddit = async (subreddit: string, after?: string) => {\r\n  try {\r\n    console.log(\"sending request...\");\r\n    let url = `https://www.reddit.com/r/${subreddit}.json?raw_json=1`;\r\n    if (after) url = `${url}&after=${after}`;\r\n    const response = await axios.get(url);\r\n    // const response = await (await fetch(url)).json();\r\n    return response.data.data;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nexport default fetchFromReddit;\r\n","import React, {useState, useEffect, useRef, useCallback} from 'react';\r\nimport {motion} from 'framer-motion';\r\nimport Modal from '../modal/Modal';\r\nimport fetchFromReddit from '../../api/fetchFromReddit';\r\nimport classes from \"./Gallery.module.css\";\r\n\r\ninterface ImageSource {\r\n  url: string,\r\n  height: number,\r\n  width: number,\r\n}\r\n\r\ninterface ImageData {\r\n  thumbnail: string,\r\n  url: string,\r\n  id: string,\r\n  preview: ImageSource,\r\n  source: ImageSource\r\n}\r\n\r\nconst Gallery= () => {\r\n  const [images, setImages] = useState<ImageData[]>([]);\r\n  const [subreddit, setSubreddit] = useState('nocontextpics');\r\n  const [loading, setLoading] = useState(true);\r\n  const [nextPage, setNextPage] = useState('');\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalImageUrl, setModalImageUrl] = useState('');\r\n\r\n  const observer = useRef<IntersectionObserver>();\r\n\r\n  const fetchMorePictures = useCallback( async () => {\r\n      setLoading(true);\r\n      const resData =await fetchFromReddit(subreddit, nextPage);\r\n      setNextPage(resData.after);\r\n      const fetchedImages = configureImageObject(resData.children);\r\n      const updatedImages = [...images, ...fetchedImages];\r\n      setImages(updatedImages);\r\n      setLoading(false);\r\n    }, [images, nextPage, subreddit])\r\n\r\n  const lastPictureElementRef = useCallback((node) => {\r\n    console.log(node);\r\n    // if(loading) return;\r\n    \r\n    if(observer.current) {\r\n      console.log(observer.current);\r\n      observer.current.disconnect();\r\n    }\r\n    console.log(\"last Picture ref preis new intersection\")\r\n    observer.current = new IntersectionObserver((entries) => {\r\n      console.log(entries);\r\n      if(entries[0].isIntersecting && images.length <=100) {\r\n        console.log('visible');\r\n        fetchMorePictures();\r\n      }\r\n    })\r\n    console.log(\"last Picture ref po new intersection\")\r\n\r\n\r\n    if(node) observer.current.observe(node);\r\n\r\n  },[fetchMorePictures, images.length])\r\n\r\n  useEffect(() => {\r\n    console.log('loading: ', loading);\r\n  },[loading]);\r\n\r\n  const configureImageObject = (data:any) => {\r\n    return data.map(((imgData:any )=> {\r\n      return {\r\n        thumbnail: imgData.data.thumbnail,\r\n        url: imgData.data.url,\r\n        id: imgData.data.id,\r\n        source: {\r\n          url: imgData.data.preview.images[0].source.url,\r\n          height: imgData.data.preview.images[0].source.height,\r\n          width: imgData.data.preview.images[0].source.width,\r\n        },\r\n        preview: imgData.data.preview.images[0].resolutions[2]\r\n      }\r\n    }))\r\n  }\r\n\r\n  useEffect(() => {\r\n     const fetchImages = async () => {\r\n      try{\r\n      setLoading(true);\r\n      const resData = await fetchFromReddit(subreddit);\r\n      setNextPage(resData.after);\r\n      const imageData = configureImageObject(resData.children);\r\n      setImages(imageData);\r\n      setLoading(false);\r\n    } catch(err){console.error(err)}\r\n    }\r\n    fetchImages();\r\n  }, [subreddit]);\r\n\r\n  const imageClickedHandler = (url:string) => {\r\n    setModalImageUrl(url);\r\n    setShowModal(true);\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n    {showModal && <Modal show={showModal} closeModal={() => setShowModal(false)} imgUrl={modalImageUrl}/>}\r\n    {images.length>0 && <div className={classes.Gallery}>\r\n      {images.map((img:ImageData, index:number) => (\r\n        <motion.div \r\n          ref={(images.length === index+1) ? lastPictureElementRef : null}\r\n          layout\r\n          whileHover={{opacity: 1}}\r\n          key={img.id} \r\n          className={classes.ImageContainer} \r\n          onClick={() => imageClickedHandler(img.source.url)}>\r\n          <motion.img\r\n            initial={{opacity: 0}}\r\n            animate={{opacity: 1}}\r\n            transition={{delay: index/100}}\r\n            className={classes.Image} \r\n            src={img.preview.url} \r\n            alt={img.id} />\r\n        </motion.div>\r\n      ))}\r\n    </div>}\r\n    {loading && <div>Loading...</div>}\r\n    {/* <button onClick={fetchMorePictures}>More</button> */}\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Gallery;","import React, {useEffect} from 'react';\nimport './App.css';\nimport Gallery from './components/Gallery/Gallery';\n\n\nfunction App() {\n  useEffect(() => {\n    console.log('App mounted...');\n  }, [])\n  return (\n    <div className=\"App\">\n      <header className=\"Header\"><h1 className=\"HeaderText\">No Context Pics</h1></header>\n      <Gallery></Gallery>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Gallery\":\"Gallery_Gallery__3aQ5Z\",\"ImageContainer\":\"Gallery_ImageContainer__1ZzOr\",\"Image\":\"Gallery_Image__d-RQF\"};"],"sourceRoot":""}